<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Napoleon's Theorem Visualization</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
        }
        svg {
            border: 1px solid black;
        }
        .triangle {
            fill: none;
            stroke: black;
            stroke-width: 2;
        }
        .equilateral {
            fill: none;
            stroke: blue;
            stroke-width: 2;
        }
        .napoleon {
            fill: none;
            stroke: red;
            stroke-dasharray: 5,5;
            stroke-width: 2;
        }
        .draggable {
            cursor: pointer;
            fill: red;
        }
    </style>
</head>
<body>
    <h2>Napoleon's Theorem Visualization</h2>
    <button onclick="toggleEquilateralDirection()">Toggle Inward/Outward</button>
    <br><br>
    <svg id="canvas" width="500" height="500">
        <circle class="draggable" cx="150" cy="150" r="5" onmousedown="startDrag(event, 0)"></circle>
        <circle class="draggable" cx="350" cy="150" r="5" onmousedown="startDrag(event, 1)"></circle>
        <circle class="draggable" cx="250" cy="350" r="5" onmousedown="startDrag(event, 2)"></circle>
        <polygon class="triangle" points="150,150 350,150 250,350"></polygon>
        <polygon class="equilateral" id="eq1"></polygon>
        <polygon class="equilateral" id="eq2"></polygon>
        <polygon class="equilateral" id="eq3"></polygon>
        <polygon class="napoleon" id="napoleon"></polygon>
    </svg>

    <script>
        let points = [
            { x: 150, y: 150 },
            { x: 350, y: 150 },
            { x: 250, y: 350 }
        ];
        let draggingIndex = null;
        let outward = true;

        function updateTriangle() {
            document.querySelector(".triangle").setAttribute("points", points.map(p => `${p.x},${p.y}`).join(" "));
            drawEquilateralTriangles();
        }

        function drawEquilateralTriangles() {
            const centers = [];
            for (let i = 0; i < 3; i++) {
                let p1 = points[i];
                let p2 = points[(i + 1) % 3];
                let dx = p2.x - p1.x, dy = p2.y - p1.y;
                let angle = Math.PI / 3 * (outward ? 1 : -1);
                let px = p1.x + dx / 2 + Math.cos(angle) * dy - Math.sin(angle) * dx;
                let py = p1.y + dy / 2 + Math.sin(angle) * dy + Math.cos(angle) * dx;
                centers.push({ x: px, y: py });
                document.getElementById(`eq${i + 1}`).setAttribute("points", `${p1.x},${p1.y} ${p2.x},${p2.y} ${px},${py}`);
            }
            document.getElementById("napoleon").setAttribute("points", centers.map(p => `${p.x},${p.y}`).join(" "));
        }

        function toggleEquilateralDirection() {
            outward = !outward;
            drawEquilateralTriangles();
        }

        function startDrag(event, index) {
            draggingIndex = index;
            document.addEventListener("mousemove", drag);
            document.addEventListener("mouseup", stopDrag);
        }

        function drag(event) {
            if (draggingIndex !== null) {
                let rect = document.getElementById("canvas").getBoundingClientRect();
                points[draggingIndex].x = event.clientX - rect.left;
                points[draggingIndex].y = event.clientY - rect.top;
                updateTriangle();
            }
        }

        function stopDrag() {
            draggingIndex = null;
            document.removeEventListener("mousemove", drag);
            document.removeEventListener("mouseup", stopDrag);
        }

        updateTriangle();
    </script>
</body>
</html>
